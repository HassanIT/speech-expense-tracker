[{"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/index.js":"1","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/App.js":"2","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Details/Details.jsx":"3","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Details/styles.js":"4","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/styles.js":"5","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Main.jsx":"6","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/styles.js":"7","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Form/Form.jsx":"8","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Form/styles.js":"9","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/List/List.jsx":"10","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/List/styles.js":"11","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/context/context.js":"12","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/context/contextReducer.js":"13","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/constants/categories.js":"14","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/utils/formatDate.js":"15","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/useTransactions.js":"16","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Snackbar/Snackbar.jsx":"17","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Snackbar/styles.js":"18","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/InfoCard.jsx":"19"},{"size":438,"mtime":1609192164580,"results":"20","hashOfConfig":"21"},{"size":1690,"mtime":1609206524479,"results":"22","hashOfConfig":"21"},{"size":717,"mtime":1609190705173,"results":"23","hashOfConfig":"21"},{"size":245,"mtime":1609175151795,"results":"24","hashOfConfig":"21"},{"size":551,"mtime":1609173852742,"results":"25","hashOfConfig":"21"},{"size":1266,"mtime":1609203720044,"results":"26","hashOfConfig":"21"},{"size":489,"mtime":1609174426316,"results":"27","hashOfConfig":"21"},{"size":5130,"mtime":1609200667057,"results":"28","hashOfConfig":"21"},{"size":234,"mtime":1609175358851,"results":"29","hashOfConfig":"21"},{"size":1599,"mtime":1609186781722,"results":"30","hashOfConfig":"21"},{"size":398,"mtime":1609177020953,"results":"31","hashOfConfig":"21"},{"size":1051,"mtime":1609196377038,"results":"32","hashOfConfig":"21"},{"size":692,"mtime":1609195790759,"results":"33","hashOfConfig":"21"},{"size":1659,"mtime":1609187400143,"results":"34","hashOfConfig":"21"},{"size":360,"mtime":1609190943021,"results":"35","hashOfConfig":"21"},{"size":1149,"mtime":1609190630990,"results":"36","hashOfConfig":"21"},{"size":879,"mtime":1609200687720,"results":"37","hashOfConfig":"21"},{"size":195,"mtime":1609197017276,"results":"38","hashOfConfig":"21"},{"size":472,"mtime":1609201175817,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"nf03nu",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/index.js",[],["81","82"],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/App.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Details/Details.jsx",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Details/styles.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/styles.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Main.jsx",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/styles.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Form/Form.jsx",["83"],"import React, { useState, useEffect, useContext } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSpeechContext } from '@speechly/react-client';\n\nimport formatDate from '../../../utils/formatDate';\nimport useStyles from './styles';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackBar from '../../Snackbar/Snackbar';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\n\nconst Form = () => {\n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState);\n    const { addTransaction } = useContext(ExpenseTrackerContext);\n    const { segment } = useSpeechContext();\n    const [open, setOpen] = useState(false);\n\n    const createTransaction = () => {\n        if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() }\n\n        setOpen(true);\n        addTransaction(transaction);\n        setFormData(initialState);\n    }\n\n    useEffect(() => {\n        if (segment) {\n            if (segment.intent.intent === 'add_expense') {\n                setFormData({ ...formData, type: 'Expense' });\n            }\n            else if (segment.intent.intent === 'add_income') {\n                setFormData({ ...formData, type: 'Income'});\n            }\n            else if (segment.isFinal && segment.intent.intent === \"create_transaction\") {\n                return createTransaction();\n            }\n            else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\") {\n                return setFormData(initialState);\n            }\n\n            segment.entities.forEach((e) => {\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n                switch (e.type) {\n                    case 'amount':\n                        setFormData({ ...formData, amount: e.value });\n                        break;\n                    case 'category':\n                        if (incomeCategories.map((iC) => iC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Income', category });\n                        }\n                        else if (expenseCategories.map((iC) => iC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Expense', category });\n                        }\n                        break;\n                    case 'date':\n                        setFormData({ ...formData, date: e.value });\n                        break;\n                    default:\n                        break;\n                }\n            });\n\n            if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n                createTransaction();\n            }\n        }\n    }, [segment]);\n\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n    return (\n        <Grid container spacing = {2}>\n            <CustomizedSnackBar open = {open} setOpen = {setOpen} />\n            <Grid item xs = {12}>\n                <Typography align = \"center\" varient = \"subtitle2\" gutterBottom>\n                    {segment && segment.words.map((w) => w.value).join(\" \")}\n                </Typography>\n            </Grid>\n            <Grid item xs = {6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value = {formData.type} onChange = {(e) => setFormData({ ...formData, type: e.target.value })}>\n                        <MenuItem value = \"Income\">Income</MenuItem>\n                        <MenuItem value = \"Expense\">Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs = {6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value = {formData.category} onChange = {(e) => setFormData({ ...formData, category: e.target.value })}>\n                        {selectedCategories.map((c) => <MenuItem key = {c.type} value = {c.type}>{c.type}</MenuItem>)}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs = {6}>\n                <TextField type = \"number\" label = \"Amount\" fullWidth value = {formData.amount} onChange = {(e) => setFormData({ ...formData, amount: e.target.value })} />\n            </Grid>\n            <Grid item xs = {6}>\n                <TextField type = \"date\" label = \"Date\" fullWidth value = {formData.date} onChange = {(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\n            </Grid>\n            <Button className = {classes.button} varient = \"outlined\" color = \"primary\" fullwidth onClick = {createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/Form/styles.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/List/List.jsx",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Main/List/styles.js",[],["84","85"],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/context/context.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/context/contextReducer.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/constants/categories.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/utils/formatDate.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/useTransactions.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Snackbar/Snackbar.jsx",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/Snackbar/styles.js",[],"/media/seagate/Files/Projects/ReactJS/voice-expense-tracker/src/components/InfoCard.jsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":76,"column":8,"nodeType":"92","endLine":76,"endColumn":17,"suggestions":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["98"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"101","text":"102"},[3085,3094],"[createTransaction, formData, segment]"]